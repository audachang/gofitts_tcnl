<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['身分證字號'], expName, timeStr)" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'身分證字號': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="pix" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="GoFitts" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="40" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="接下來我們要開始進行作業，一共有六個段落&amp;#10;&amp;#10;作業進行時請您快速又準確地移動滑鼠游標至紫色圓圈中&amp;#10;&amp;#10;移動至紫色圓圈後無需按滑鼠左鍵&amp;#10;&amp;#10;請按 Enter 鍵繼續&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'return'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="// The target that cursor currently is in, -1 = no target&amp;#10;var cursor_in_target = -1;&amp;#10;var enter_timestamp = 0;&amp;#10;var target_done_timestamp = 0;&amp;#10;&amp;#10;// on leave&amp;#10;function on_leave_target() {&amp;#10;    console.log(&quot;left target&quot;, cursor_in_target);&amp;#10;    &amp;#10;    // unpaint&amp;#10;    const target = targets[target_order[current_target]];&amp;#10;    target.fillColor = HIGHLIGHT_COLOR;&amp;#10;    target.draw();&amp;#10;    &amp;#10;    cursor_in_target = -1;&amp;#10;    // reset dwell time&amp;#10;    enter_timestamp = 0;&amp;#10;    &amp;#10;    if (first_leave) {&amp;#10;        psychoJS.experiment.addData('leave_time', mouse.mouseClock.getTime());&amp;#10;        console.log(&quot;first leave target&quot;);&amp;#10;        first_leave = false;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// on enter&amp;#10;function on_enter_target(target_idx) {&amp;#10;    console.log(&quot;entered target&quot;, target_idx);&amp;#10;&amp;#10;    cursor_in_target = target_idx;&amp;#10;    &amp;#10;    // paint&amp;#10;    const target = targets[target_order[cursor_in_target]];&amp;#10;    target.fillColor = DWELLED_COLOR;&amp;#10;    target.draw();&amp;#10;    &amp;#10;    enter_timestamp = mouse.mouseClock.getTime();&amp;#10;    psychoJS.experiment.addData('enter_time', mouse.mouseClock.getTime());&amp;#10;}" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (current_target == 0) {&amp;#10;    psychoJS.experiment.addData('from', [...mouse.getPos()]);&amp;#10;    // can't reset mouse position!&amp;#10;} else {&amp;#10;    from_t = targets[target_order[current_target - 1]];&amp;#10;    psychoJS.experiment.addData('from', [...from_t.pos]);&amp;#10;}&amp;#10;&amp;#10;for (var idx, _pj_c = 0, _pj_a = util.range(targets.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    idx = _pj_a[_pj_c];&amp;#10;    let target = targets[idx];&amp;#10;    if ((idx === target_order[current_target])) {&amp;#10;        target.fillColor = HIGHLIGHT_COLOR;&amp;#10;    } else {&amp;#10;        target.fillColor = NORMAL_COLOR;&amp;#10;    }&amp;#10;    target.draw();&amp;#10;}&amp;#10;&amp;#10;// reset&amp;#10;first_leave = true&amp;#10;enter_timestamp = 0;&amp;#10;&amp;#10;to_t = targets[target_order[current_target]];&amp;#10;psychoJS.experiment.addData('to', [...to_t.pos]);&amp;#10;psychoJS.experiment.addData('w', target_w);&amp;#10;psychoJS.experiment.addData('a', target_a);&amp;#10;psychoJS.experiment.addData('id', target_id);&amp;#10;&amp;#10;psychoJS.experiment.addData('sequence_loop.thisN', sequence_loop.thisN);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if current_target == 0:&amp;#10;    thisExp.addData('from', [0, 0])&amp;#10;    # reset mouse position&amp;#10;    mouse.setPos([0, 0])&amp;#10;else:&amp;#10;    from_t = targets[target_order[current_target - 1]]&amp;#10;    thisExp.addData('from', [*from_t.pos])&amp;#10;&amp;#10;to_t = targets[target_order[current_target]]&amp;#10;thisExp.addData('to', [*to_t.pos])&amp;#10;thisExp.addData('w', target_w)&amp;#10;thisExp.addData('a', target_a)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if current_target != target_c:&amp;#10;    for idx in range(len(targets)):&amp;#10;        target = targets[idx]&amp;#10;        if idx == target_order[current_target]:&amp;#10;            target.fillColor = HIGHLIGHT_COLOR&amp;#10;        else:&amp;#10;            target.fillColor = NORMAL_COLOR&amp;#10;        target.draw()&amp;#10;&amp;#10;    if mouse.mouseMoved():&amp;#10;        x, y = mouse.getPos()&amp;#10;        if is_in_target(x, y):&amp;#10;            continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (current_target != target_c) {&amp;#10;    // check dwell time&amp;#10;    if (enter_timestamp &gt; 0) {&amp;#10;        const cur_timestamp = mouse.mouseClock.getTime();&amp;#10;        if (cur_timestamp - enter_timestamp &gt; DWELL_TIME_SECS) {&amp;#10;            enter_timestamp = 0&amp;#10;            target_done_timestamp = mouse.mouseClock.getTime();&amp;#10;            cur_target_circle = targets[target_order[current_target]]&amp;#10;            cur_target_circle.fillColor = NORMAL_COLOR;&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;    if (target_done_timestamp &gt; 0) {&amp;#10;        const cur_timestamp = mouse.mouseClock.getTime();&amp;#10;        if (cur_timestamp - target_done_timestamp &gt; TARGET_INTERVAL_SECS) {&amp;#10;            continueRoutine = false;&amp;#10;            target_done_timestamp = 0;&amp;#10;            console.log(&quot;next target&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;    if (mouse.mouseMoved()) {&amp;#10;        let [x, y] = mouse.getPos();&amp;#10;        // enter&amp;#10;        if (cursor_in_target &lt; 0 &amp;&amp; is_in_target(x, y, current_target)) {&amp;#10;            on_enter_target(current_target);&amp;#10;        }&amp;#10;    &amp;#10;        // leave&amp;#10;        if (cursor_in_target &gt;= 0 &amp;&amp; !is_in_target(x, y, cursor_in_target)) {&amp;#10;            on_leave_target(cursor_in_target);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (current_target + 1 == target_c) {&amp;#10;    for (let target of targets) {&amp;#10;        target.hide();&amp;#10;    }&amp;#10;}&amp;#10;current_target += 1;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="current_target += 1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="every frame" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="sequence_start">
      <RoutineSettingsComponent name="sequence_start" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="sequence_start" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (TEST_MODE) {&amp;#10;    target_c = TEST_TARGET_COUNT;&amp;#10;    parameters = TEST_PARAMETERS;&amp;#10;} else {&amp;#10;    target_c = PROD_TARGET_COUNT;&amp;#10;    parameters = PROD_PARAMETERS; &amp;#10;}&amp;#10;&amp;#10;util.shuffle(parameters);&amp;#10;&amp;#10;mouse.getPos();&amp;#10;[target_a, target_w, target_id] = parameters.pop();&amp;#10;if (TEST_MODE) {&amp;#10;    console.log(&quot;target_a:&quot;, target_a);&amp;#10;    console.log(&quot;target_w:&quot;, target_w);&amp;#10;    console.log(&quot;target_id:&quot;, target_id);&amp;#10;}&amp;#10;&amp;#10;// Re-initalization&amp;#10;targets = [];&amp;#10;current_target = 0;&amp;#10;target_order = [];&amp;#10;&amp;#10;// Add circle&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(target_c), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let x = ((target_a / 2) * Math.cos(((2.0 * pi) * (i / target_c))));&amp;#10;    let y = ((target_a / 2) * Math.sin(((2.0 * pi) * (i / target_c))));&amp;#10;    // size is the &quot;diameter&quot; of the circle, not radius&amp;#10;    let target = new visual.Polygon({&quot;win&quot;: psychoJS.window, &quot;size&quot;: target_w, &quot;pos&quot;: [x, y], &quot;fillColor&quot;: &quot;white&quot;, &quot;lineWidth&quot;: 2, &quot;lineColor&quot;: LINE_COLOR, &quot;edges&quot;: 100});&amp;#10;    targets.push(target);&amp;#10;}&amp;#10;&amp;#10;// Filling target order&amp;#10;let start = util.randint(0, (target_c - 1));&amp;#10;const interval = Number.parseInt(((target_c + 1) / 2));&amp;#10;let idx = 0;&amp;#10;while ((idx &lt; target_c)) {&amp;#10;    target_order.push((start % target_c));&amp;#10;    idx += 1;&amp;#10;    if ((idx &lt; target_c)) {&amp;#10;        target_order.push(((start + interval) % target_c));&amp;#10;        idx += 1;&amp;#10;    }&amp;#10;    start += 1;&amp;#10;}" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="mouse.getPos() # this is needed here because of mouse.mouseMoved()&amp;#10;target_a, target_w = parameters.pop()&amp;#10;&amp;#10;targets = []&amp;#10;current_target = 0&amp;#10;target_order = []&amp;#10;&amp;#10;for i in range(target_c):&amp;#10;    x = target_a / 2 * cos(2.0 * pi * (i / target_c))&amp;#10;    y = target_a / 2 * sin(2.0 * pi * (i / target_c))&amp;#10;    target = visual.Circle(win=win,&amp;#10;                           size=target_w,&amp;#10;                           pos=(x,y),&amp;#10;                           fillColor=&quot;white&quot;,&amp;#10;                           lineWidth=2,&amp;#10;                           lineColor=LINE_COLOR)&amp;#10;    targets.append(target)&amp;#10;&amp;#10;start = randint(0, target_c - 1)&amp;#10;interval = int((target_c + 1) / 2)&amp;#10;idx = 0&amp;#10;while idx &lt; target_c:&amp;#10;    target_order.append(start % target_c)&amp;#10;    idx += 1&amp;#10;    if idx &lt; target_c:&amp;#10;        target_order.append((start + interval) % target_c)&amp;#10;        idx += 1&amp;#10;    start += 1&amp;#10;&amp;#10;print(target_order)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="message = &quot;實驗已結束，感謝您的參與&quot;" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="message = &quot;實驗已結束，感謝您的參與&quot;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="seq_text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="40" valType="num" updates="constant" name="letterHeight"/>
        <Param val="seq_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="按下Enter鍵開始" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="seq_start_confirm" plugin="None">
        <Param val="'return'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="seq_start_confirm" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="test_mouse">
      <RoutineSettingsComponent name="test_mouse" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="test_mouse" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="experiment_code" plugin="None">
        <Param val="HIGHLIGHT_COLOR = &quot;#CCCCFF&quot;&amp;#10;NORMAL_COLOR = &quot;#FFFFFF&quot;&amp;#10;LINE_COLOR = &quot;#6A6A6A&quot;&amp;#10;&amp;#10;target_c = 15&amp;#10;parameters = [(100, 80), (170, 77.8), (250, 71.5), (325, 60.5), (400, 48), (475, 40.5), (550, 32.3), (625, 25.5), (700, 20)]&amp;#10;&amp;#10;n_seqs = len(parameters)&amp;#10;n_trials = target_c&amp;#10;&amp;#10;targets = []&amp;#10;target_order = []&amp;#10;current_target = 0&amp;#10;&amp;#10;target_w = 0&amp;#10;target_a = 0&amp;#10;retry = 999&amp;#10;&amp;#10;def is_in_target(x, y):&amp;#10;    if current_target == target_c: return False&amp;#10;    tx, ty = targets[target_order[current_target]].pos&amp;#10;    return (x - tx) ** 2 + (y - ty) ** 2 &lt;= (target_w // 2) ** 2" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="// Experiment Settings&amp;#10;const HIGHLIGHT_COLOR = &quot;#CCCCFF&quot;;&amp;#10;const NORMAL_COLOR = &quot;#FFFFFF&quot;;&amp;#10;const DWELLED_COLOR = &quot;#F5EF42&quot;;&amp;#10;const LINE_COLOR = &quot;#6A6A6A&quot;;&amp;#10;&amp;#10;const TEST_MOUSE_TARGET_COUNT = 4;&amp;#10;const TEST_MOUSE_PARAMETERS = [[700, 40]];&amp;#10;&amp;#10;const DWELL_TIME_SECS = 0.5;&amp;#10;const TARGET_INTERVAL_SECS = 0.2;&amp;#10;&amp;#10;const TEST_TARGET_COUNT = 15;&amp;#10;const TEST_IDS = [6.32, 6.32];&amp;#10;&amp;#10;const PROD_TARGET_COUNT = 15;&amp;#10;const PROD_IDS = [3.75, 4.32, 4.75, 5.32, 5.75, 6.32];&amp;#10;&amp;#10;const TEST_MODE = false;&amp;#10;&amp;#10;// input: id, output: [a, w]&amp;#10;function generate_parameters(id) {&amp;#10;    const coef = (Math.pow(2, id) - 1) / 2;&amp;#10;    const w_ub = Math.floor(960 / (2 + coef));&amp;#10;    w = util.randint(20, w_ub);&amp;#10;    a = coef * w;&amp;#10;    return [a, w, id];&amp;#10;}&amp;#10;&amp;#10;const TEST_PARAMETERS = [];&amp;#10;const PROD_PARAMETERS = [];&amp;#10;&amp;#10;// fill parameters&amp;#10;for (let id of TEST_IDS) {&amp;#10;    TEST_PARAMETERS.push(generate_parameters(id));&amp;#10;}&amp;#10;for (let id of PROD_IDS) {&amp;#10;    PROD_PARAMETERS.push(generate_parameters(id));&amp;#10;}&amp;#10;&amp;#10;var target_c = TEST_MODE ? TEST_TARGET_COUNT : PROD_TARGET_COUNT;&amp;#10;var parameters = TEST_MODE ? TEST_PARAMETERS : PROD_PARAMETERS;&amp;#10;&amp;#10;// for loop variables&amp;#10;const n_seqs = TEST_MODE ? TEST_PARAMETERS.length : PROD_PARAMETERS.length;&amp;#10;const n_trials = TEST_MODE ? TEST_TARGET_COUNT : PROD_TARGET_COUNT;&amp;#10;&amp;#10;// variables that needs to be referenced else where&amp;#10;var targets = [];&amp;#10;var target_order = [];&amp;#10;var current_target = 0;&amp;#10;&amp;#10;var target_w = 0;&amp;#10;var target_a = 0;&amp;#10;var target_id = 0;&amp;#10;var retry = 999;&amp;#10;&amp;#10;// trial targets (object)&amp;#10;var from_t, to_t;&amp;#10;&amp;#10;function is_in_target(x, y, target_idx) {&amp;#10;    if (target_idx &gt;= 0 &amp;&amp; target_idx &lt; target_c) {&amp;#10;        let tx, ty;&amp;#10;        [tx, ty] = targets[target_order[target_idx]].pos;&amp;#10;        return ((Math.pow((x - tx), 2) + Math.pow((y - ty), 2)) &lt;= Math.pow(target_w / 2, 2));&amp;#10;    }&amp;#10;    return false;&amp;#10;}&amp;#10;&amp;#10;// manually add expInfo&amp;#10;util.addInfoFromUrl(expInfo);&amp;#10;&amp;#10;var timeStr = (new Date()).toISOString();" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="target_c = TEST_MOUSE_TARGET_COUNT;&amp;#10;parameters = TEST_MOUSE_PARAMETERS;&amp;#10;&amp;#10;mouse.getPos();&amp;#10;[target_a, target_w, target_id] = parameters[0];&amp;#10;&amp;#10;// Re-initalization&amp;#10;targets = [];&amp;#10;current_target = 0;&amp;#10;target_order = [];&amp;#10;&amp;#10;// Add circle&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(target_c), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let x = ((target_a / 2) * Math.cos(((2.0 * pi) * (i / target_c))));&amp;#10;    let y = ((target_a / 2) * Math.sin(((2.0 * pi) * (i / target_c))));&amp;#10;    let target = new visual.Polygon({&quot;win&quot;: psychoJS.window, &quot;size&quot;: target_w, &quot;pos&quot;: [x, y], &quot;fillColor&quot;: &quot;white&quot;, &quot;lineWidth&quot;: 2, &quot;lineColor&quot;: LINE_COLOR, &quot;edges&quot;: 100});&amp;#10;    targets.push(target);&amp;#10;}&amp;#10;&amp;#10;// Filling target order&amp;#10;let idx = 0;&amp;#10;while (idx &lt; target_c) {&amp;#10;    target_order.push(idx);&amp;#10;    idx += 1;&amp;#10;}" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="target_c = 4&amp;#10;parameters = [(700, 40)]&amp;#10;&amp;#10;mouse.getPos() # this is needed here because of mouse.mouseMoved()&amp;#10;target_a, target_w = parameters.pop()&amp;#10;&amp;#10;targets = []&amp;#10;current_target = 0&amp;#10;target_order = []&amp;#10;&amp;#10;for i in range(target_c):&amp;#10;    x = target_a / 2 * cos(2.0 * pi * (i / target_c))&amp;#10;    y = target_a / 2 * sin(2.0 * pi * (i / target_c))&amp;#10;    target = visual.Circle(win=win,&amp;#10;                           size=target_w,&amp;#10;                           pos=(x,y),&amp;#10;                           fillColor=&quot;white&quot;,&amp;#10;                           lineWidth=2,&amp;#10;                           lineColor=LINE_COLOR)&amp;#10;    targets.append(target)&amp;#10;&amp;#10;idx = 0&amp;#10;while idx &lt; target_c:&amp;#10;    target_order.append(idx)&amp;#10;    idx += 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if current_target != target_c:&amp;#10;    for idx in range(len(targets)):&amp;#10;        target = targets[idx]&amp;#10;        if idx == target_order[current_target]:&amp;#10;            target.fillColor = HIGHLIGHT_COLOR&amp;#10;        else:&amp;#10;            target.fillColor = NORMAL_COLOR&amp;#10;        target.draw()&amp;#10;&amp;#10;    if mouse.mouseMoved():&amp;#10;        x, y = mouse.getPos()&amp;#10;        if is_in_target(x, y):&amp;#10;            if current_target + 1 == target_c:&amp;#10;                continueRoutine = False&amp;#10;            else:&amp;#10;                current_target += 1" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (current_target != target_c) {&amp;#10;    for (var idx, _pj_c = 0, _pj_a = util.range(targets.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        idx = _pj_a[_pj_c];&amp;#10;        let target = targets[idx];&amp;#10;        if ((idx === target_order[current_target])) {&amp;#10;            target.fillColor = HIGHLIGHT_COLOR;&amp;#10;        } else {&amp;#10;            target.fillColor = NORMAL_COLOR;&amp;#10;        }&amp;#10;        target.draw();&amp;#10;    }&amp;#10;    if (mouse.mouseMoved()) {&amp;#10;        let [x, y] = mouse.getPos();&amp;#10;        if (is_in_target(x, y, current_target)) {&amp;#10;            if (current_target + 1 == target_c) {&amp;#10;                continueRoutine = false;&amp;#10;            } else {&amp;#10;                current_target += 1;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (let target of targets) {&amp;#10;    target.hide();&amp;#10;}" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="target_c = 15&amp;#10;parameters = [(100, 80), (170, 77.8), (250, 71.5), (325, 60.5), (400, 48), (475, 40.5), (550, 32.3), (625, 25.5), (700, 20)]&amp;#10;&amp;#10;shuffle(parameters)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="experiment_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_2" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="test_instruction_text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="40" valType="num" updates="constant" name="letterHeight"/>
        <Param val="test_instruction_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="請移動滑鼠游標，&amp;#10;分別到上下左右四個圓圈範圍內&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="welcome">
      <RoutineSettingsComponent name="welcome" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="welcome" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="welcome_text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="40" valType="num" updates="constant" name="letterHeight"/>
        <Param val="welcome_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="歡迎參加目標點擊作業！&amp;#10;&amp;#10;本實驗需由全螢幕進行，請勿按 Esc 離開全螢幕&amp;#10;&amp;#10;實驗進行時請您快速又準確地移動滑鼠游標至紫色圓圈中&amp;#10;&amp;#10;開始進行作業前，先確認您能順利地操作滑鼠&amp;#10;&amp;#10;請按 Enter 鍵繼續&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="welcome_confirm" plugin="None">
        <Param val="'return'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="welcome_confirm" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="confirmation">
      <RoutineSettingsComponent name="confirmation" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="confirmation" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="retry" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (test_confirm.keys === &quot;return&quot;) {&amp;#10;    retry_testing.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if test_confirm.keys == 'return':&amp;#10;    retry_testing.finished = True" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="retry" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="test_confirm_text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="40" valType="num" updates="constant" name="letterHeight"/>
        <Param val="test_confirm_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="您剛才能夠順利操作滑鼠點擊四個目標圓圈嗎？&amp;#10;如果不行的話，請調整桌面上滑鼠的操作空間，&amp;#10;以及您使用滑鼠的姿勢，讓您可以順利地操作。&amp;#10;&amp;#10;若您已經可以順利操作，請按Enter鍵繼續&amp;#10;若您需要調整滑鼠及姿勢，請按空白鍵重試" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="test_confirm" plugin="None">
        <Param val="'return', 'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="test_confirm" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="end">
      <RoutineSettingsComponent name="end" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="end" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="saving.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 80)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1086, 558)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="welcome"/>
    <LoopInitiator loopType="TrialHandler" name="retry_testing">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1000" valType="num"/>
      <Param name="name" updates="None" val="retry_testing" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="test_mouse"/>
    <Routine name="confirmation"/>
    <LoopTerminator name="retry_testing"/>
    <Routine name="init"/>
    <LoopInitiator loopType="TrialHandler" name="sequence_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_seqs" valType="num"/>
      <Param name="name" updates="None" val="sequence_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="sequence_start"/>
    <LoopInitiator loopType="TrialHandler" name="trial_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="n_trials" valType="num"/>
      <Param name="name" updates="None" val="trial_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trial_loop"/>
    <LoopTerminator name="sequence_loop"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
